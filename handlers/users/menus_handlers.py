from keyboards.default.default_keyboards import MENU_BUTTONS_TEXTS, MenuKeyboardBuilder, \
    TESTS_BUTTONS_TEXTS, ADMIN_BUTTONS_TEXTS, INFO_BUTTONS_TEXTS, BACK_BUTTONS_TEXTS
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from keyboards.inline.inline_keyboards import SimpleKeyboardBuilder, PeriodSelector
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageNotModified
from utils.product_analytics import AnalyticsManager
from loader import dp, bot, postgres_manager
from utils.misc.logging import logging
from states.states import StateGroup
from contextlib import suppress
from asyncio import sleep
from aiogram import types


# ----------------------------BACK BUTTONS HANDLERS---------------------------------
@dp.callback_query_handler(lambda call: call.data == "error")
async def handle_error_situation(callback: types.CallbackQuery):
    await callback.message.delete()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É!!!")
    await start_menu(callback)


@dp.message_handler(lambda message: message.text in BACK_BUTTONS_TEXTS.values())
async def handle_back_button(message: types.Message):
    if message.text == BACK_BUTTONS_TEXTS["back_to_menu"]:
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        await message.answer("–ú–µ–Ω—é", reply_markup=MenuKeyboardBuilder().get_main_menu_keyboard(message.from_user))


@dp.callback_query_handler(lambda callback: callback.data == 'menu')
async def start_menu(callback_query: types.CallbackQuery):
    with suppress(MessageToDeleteNotFound):
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id - 2)

    menu_keyboard = MenuKeyboardBuilder().get_main_menu_keyboard(callback_query.from_user)
    await callback_query.message.answer('–ú–µ–Ω—é', reply_markup=menu_keyboard)
    await callback_query.message.delete()

# ------------------------------HANDLE MAIN MENU----------------------------------------------


@dp.message_handler(lambda message: message.text in MENU_BUTTONS_TEXTS.values())
async def handle_menu_buttons(message: types.Message):
    user = await postgres_manager.get_user(message.from_user.id)

    async def delete_past_messages(msg: types.Message):
        with suppress(MessageToDeleteNotFound):
            await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id - 1)
        await msg.delete()

    if message.text == MENU_BUTTONS_TEXTS["tests"]:
        await delete_past_messages(message)
        await message.answer("–ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤", reply_markup=MenuKeyboardBuilder().get_tests_menu_keyboard())

    elif message.text == MENU_BUTTONS_TEXTS["info"]:
        await delete_past_messages(message)
        await message.answer("–ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=MenuKeyboardBuilder().get_info_menu_keyboard())

    elif message.text == MENU_BUTTONS_TEXTS["admin"]:
        await delete_past_messages(message)
        await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=MenuKeyboardBuilder().get_admin_menu_keyboard())

    elif message.text == MENU_BUTTONS_TEXTS["order_vih_test"]:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ü–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –í–ò–ß!")
        await postgres_manager.database_log(user=user["id"], action="–ü–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –í–ò–ß!")

        btn = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://hivtest.kz/")
        await message.answer('–ó–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç', reply_markup=InlineKeyboardMarkup().add(btn))

    elif message.text == MENU_BUTTONS_TEXTS["contacting_consultant"]:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º!")
        await postgres_manager.database_log(user=user["id"], action="–ù–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º!")

        msg = await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...", reply_markup=ReplyKeyboardRemove())
        await sleep(delay=1.2)
        await msg.delete()
        await message.answer("""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–ª—å–¥–∞–º–∏—Ä. –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.
        """, reply_markup=MenuKeyboardBuilder().get_end_conversation_keyboard())
        await StateGroup.in_consult.set()


# ------------------------------HANDLE ADMIN MENU----------------------------------------------

@dp.message_handler(lambda message: message.text in ADMIN_BUTTONS_TEXTS.values())
async def handle_admin_menu(message: types.Message):
    analytics_manager = AnalyticsManager()
    choose_month_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:"

    if message.text == ADMIN_BUTTONS_TEXTS["get_users"]:
        saved_file_path = await postgres_manager.download_users_table()
        with open(saved_file_path, "rb") as users_data:
            await message.answer_document(users_data)

    elif message.text == ADMIN_BUTTONS_TEXTS["get_period_analytics"]:
        period_selector = PeriodSelector()
        keyboard = period_selector.get_keyboard()
        await message.answer(choose_month_text, reply_markup=keyboard)

    elif message.text == ADMIN_BUTTONS_TEXTS["get_all_analytics"]:
        msg = await message.answer("–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        await analytics_manager.analyze_all()
        analytics = await analytics_manager.get_analytics_results()
        await msg.delete()
        await message.answer(analytics, "MARKDOWN")


@dp.callback_query_handler(lambda call: PeriodSelector.filter_callbacks(call))
async def handle_period_selection(call: types.CallbackQuery):
    period_selector = PeriodSelector()
    analytics_manager = AnalyticsManager()
    callback_components = period_selector.get_callback_components(call)

    if "[monthCallbacks]" in callback_components.values():
        await call.message.delete()
        msg = await call.message.answer("–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        await analytics_manager.analyze_period(callback_components["date"])
        analytics = await analytics_manager.get_analytics_results()
        await msg.delete()
        await call.message.answer(analytics, "MARKDOWN")

    elif "[backCallback]" in callback_components.values():
        keyboard = period_selector.get_previous_year_keyboard(call)
        with suppress(MessageNotModified):
            await call.message.edit_reply_markup(keyboard)

    elif "[forwardCallback]" in callback_components.values():
        keyboard = period_selector.get_next_year_keyboard(call)
        with suppress(MessageNotModified):
            await call.message.edit_reply_markup(keyboard)


# ------------------------------HANDLE INFO MENU----------------------------------------------
@dp.message_handler(lambda message: message.text in INFO_BUTTONS_TEXTS.values())
async def handle_info_menu(message: types.Message):
    user = await postgres_manager.get_user(message.from_user.id)

    visit_social_networks_text = "Facebook –∏ Instagram —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    project_news_text_1 = "–û –í–ò–ß —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ–¥—Ä–æ—Å—Ç–∫–∏"
    project_news_text_2 = "–î–æ–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞: –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –í–ò–ß –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ"
    tell_your_partner_text = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ üôã‚Äç‚ôÄ"
    ask_language = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
    about_developer_text = "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏—Ç –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Öüëá"

    if message.text == INFO_BUTTONS_TEXTS["social_networks"]:
        keyboard = SimpleKeyboardBuilder.get_social_networks_keyboard()
        await message.answer(visit_social_networks_text, reply_markup=keyboard)

    elif message.text == INFO_BUTTONS_TEXTS["project_news"]:
        first_keyboard, second_keyboard = SimpleKeyboardBuilder.get_project_news_keyboards()
        await message.answer(project_news_text_1, reply_markup=first_keyboard)
        await message.answer(project_news_text_2, reply_markup=second_keyboard)

    elif message.text == INFO_BUTTONS_TEXTS["tell_partner"]:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä—É –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await postgres_manager.database_log(user=user["id"], action="–†–∞—Å—Å–∫–∞–∑–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä—É –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        keyboard = SimpleKeyboardBuilder.get_tell_partner_keyboard()
        await message.answer(tell_your_partner_text, reply_markup=keyboard)

    elif message.text == INFO_BUTTONS_TEXTS["info_files"]:
        keyboard = SimpleKeyboardBuilder.get_language_selection_documents_keyboard()
        await message.answer(ask_language, reply_markup=keyboard)

    elif message.text == INFO_BUTTONS_TEXTS["about_dev"]:
        with open("data/pictures/about_us.png", "rb") as picture:
            await message.answer_photo(
                photo=picture,
                caption=about_developer_text,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(
                    "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üë®‚Äçüíª",
                    url="https://t.me/tyan_io")
                )
            )


# ------------------------------HANDLE TESTS MENU----------------------------------------------
@dp.message_handler(lambda message: message.text in TESTS_BUTTONS_TEXTS.values())
async def handle_tests_menu(message: types.Message):
    with suppress(MessageToDeleteNotFound):
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    await message.delete()

    choose_language_text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"

    if message.text == TESTS_BUTTONS_TEXTS["hiv_risk_assessment"]:
        language_select_keyboard = SimpleKeyboardBuilder.get_language_selection_keyboard("hiv_risk_assessment")

    elif message.text == TESTS_BUTTONS_TEXTS["hiv_knowledge_assessment"]:
        language_select_keyboard = SimpleKeyboardBuilder.get_language_selection_keyboard("hiv_knowledge_assessment")

    elif message.text == TESTS_BUTTONS_TEXTS["sogi_assessment"]:
        language_select_keyboard = SimpleKeyboardBuilder.get_language_selection_keyboard("sogi_assessment")

    elif message.text == TESTS_BUTTONS_TEXTS["pkp_assessment"]:
        language_select_keyboard = SimpleKeyboardBuilder.get_language_selection_keyboard("pkp_assessment")

    elif message.text == TESTS_BUTTONS_TEXTS["understanding_PLHIV_assessment"]:
        language_select_keyboard = SimpleKeyboardBuilder.get_language_selection_keyboard("understanding_PLHIV_assessment")

    else:
        language_select_keyboard = SimpleKeyboardBuilder.get_error_keyboard()

    await message.answer(
        text=choose_language_text,
        reply_markup=language_select_keyboard
    )
    await StateGroup.in_test.set()

